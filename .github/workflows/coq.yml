name: CI (Coq)

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # N.B. The update-README makefile target pulls information
        # about Coq versions from this file, so be careful about
        # ordering of the env and about the presence of COQ_VERSION
        # immediately followed by : in this file
        env:
        - { COQ_VERSION: "master", COQ_PACKAGE: "coq        libcoq-ocaml-dev"       , PPA: "ppa:jgross-h/coq-master-daily"             , TIMED: "1" }
        - { COQ_VERSION: "8.15.0", COQ_PACKAGE: "coq-8.15.0 libcoq-8.15.0-ocaml-dev", PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-08" , TIMED: "1" }
        - { COQ_VERSION: "8.14.1", COQ_PACKAGE: "coq-8.14.1 libcoq-8.14.1-ocaml-dev", PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-08" , TIMED: "1" }
        - { COQ_VERSION: "8.13.2", COQ_PACKAGE: "coq-8.13.2 libcoq-8.13.2-ocaml-dev", PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-05" , TIMED: "1" }
        - { COQ_VERSION: "8.12.2", COQ_PACKAGE: "coq-8.12.2 libcoq-8.12.2-ocaml-dev", PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-05" , TIMED: "1" }
        - { COQ_VERSION: "8.11.2", COQ_PACKAGE: "coq-8.11.2 libcoq-8.11.2-ocaml-dev", PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-05" , TIMED: "1" }
        - { COQ_VERSION: "8.10.2", COQ_PACKAGE: "coq-8.10.2 libcoq-8.10.2-ocaml-dev", PPA: "ppa:jgross-h/many-coq-versions-ocaml-4-05" , TIMED: "1" }
        - { COQ_VERSION: "8.9.1" , COQ_PACKAGE: "coq-8.9.1  libcoq-8.9.1-ocaml-dev" , PPA: "ppa:jgross-h/many-coq-versions"            , TIMED: "1" }
        - { COQ_VERSION: "8.8.2" , COQ_PACKAGE: "coq-8.8.2  libcoq-8.8.2-ocaml-dev" , PPA: "ppa:jgross-h/many-coq-versions"            , TIMED: "1" }

    env: ${{ matrix.env }}

    steps:
    - name: install Coq and deps
      run: |
        if [ ! -z "$PPA" ]; then sudo add-apt-repository "$PPA" -y; fi
        sudo apt-get -o Acquire::Retries=30 update -q
        sudo apt-get -o Acquire::Retries=30 install -y --allow-unauthenticated \
          ocaml-findlib \
          $COQ_PACKAGE \
          apt-show-versions \
          texlive \
          texlive-latex-extra \
          texlive-bibtex-extra \
          texlive-science \
          texlive-luatex \
          texlive-lang-greek \
          lmodern \
          biber \
          gnuplot-nox \
          wget \
          curl \
          sed \
          grep \
          pdf2svg \
          python \
          python-pygments
    - uses: actions/checkout@v3
    - name: echo build params
      run: |
        echo "::group::lscpu"
        lscpu
        echo "::endgroup::"
        echo "::group::uname -a"
        uname -a
        echo "::endgroup::"
        echo "::group::lsb_release -a"
        lsb_release -a
        echo "::endgroup::"
        echo "::group::etc/machine.sh"
        etc/machine.sh
        echo "::endgroup::"
        echo "::group::ocamlc -config"
        ocamlc -config
        echo "::endgroup::"
        echo "::group::coqc --config"
        coqc --config
        echo "::endgroup::"
        echo "::group::coqc --version"
        coqc --version
        echo "::endgroup::"
        echo "::group::echo | coqtop"
        true | coqtop
        echo "::endgroup::"
        echo "::group::apt-show-versions $COQ_PACKAGE"
        apt-show-versions $COQ_PACKAGE
        echo "::endgroup::"
    - run: make -j2
    - run: make perf
    - run: make validate -j2
    - run: sudo make install install-perf
    - run: make pdf
    - run: make doc
    - run: make copy-pdf copy-doc copy-perf OUTPUT="doc-build/${COQ_VERSION}"
    - run: apt-show-versions $COQ_PACKAGE > doc-build/${COQ_VERSION}/.apt-show-versions
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.env.COQ_VERSION }}
        path: doc-build/${{ matrix.env.COQ_VERSION }}

  deploy:

    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: checkout repo (only required because of deploy step) # https://github.com/JamesIves/github-pages-deploy-action/issues/335
        uses: actions/checkout@v3
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2
        with:
          path: doc-build
      - name: Deploy pdfs
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: gh-pages
          FOLDER: doc-build
          SINGLE_COMMIT: true
        if: github.ref == 'refs/heads/master' && ( github.event_name == 'push' || github.event_name == 'schedule' )

  deploy-history:

    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: checkout repo (only required because of deploy step) # https://github.com/JamesIves/github-pages-deploy-action/issues/335
        uses: actions/checkout@v3
      - name: Install SSH Client ðŸ”‘
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.HISTORY_DEPLOY_KEY }}
        if: github.ref == 'refs/heads/master' && ( github.event_name == 'push' || github.event_name == 'schedule' )
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2
        with:
          path: doc-build
      - name: Deploy pdfs to history repo
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          REPOSITORY_NAME: coq-community/coq-performance-tests-plots-history
          SSH: true
          BRANCH: main
          FOLDER: doc-build
          SINGLE_COMMIT: false
        if: github.ref == 'refs/heads/master' && ( github.event_name == 'push' || github.event_name == 'schedule' )
